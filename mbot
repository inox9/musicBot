#!/usr/bin/env python
# coding=utf8

CONF_PATH = '/home/pi/mbot/mbot.ini'

import requests as req
import lxml.html
import datetime
import sqlite3
import subprocess as sub
import os
import time
import re
import sys
from threading import Thread
from ConfigParser import ConfigParser
from dateutil.parser import parse

conf = ConfigParser()
conf.read(CONF_PATH)
d = os.path.dirname(os.path.abspath(__file__))
sys.path.append('%s/modules' % d)

class MusicBot:
	def __init__(self, conf):
		self.conn = sqlite3.connect(conf.get('main','db'))
		self.cur = self.conn.cursor()
		self.downDir = conf.get('main','downDir')
		self.destDir = conf.get('main','destDir')
		self.email = conf.get('mail', 'address')
		self.apikey = conf.get('mail', 'apikey')
		self.domain = conf.get('mail', 'domain')
		self.downWebPath = conf.get('main', 'downWebPath')
		self.hostPriority = ['firedrive', 'uploaded', 'oboom']
		self.module_map = {
			'firedrive': 1, 
			'uploaded': 'leecherus',
			'oboom': 'leecherus'
		}
		self.waiting = []
		self.failed = []
		self.released = []

	def __del__(self):
		self.conn.commit()
		self.cur.close()
		self.conn.close()

	def getRightModule(host):
		return host if self.module_map[host] == 1 else self.module_map[host]

	def getWaitingReleases(self):
		self.cur.execute('select id,keywords from awaiting where state=0')
		self.waiting = self.cur.fetchall()

	def getFailedReleases(self):
		self.cur.execute('select id,releasepage,releasename from awaiting where state=1')
		self.failed = self.cur.fetchall()

	def setProcessingState(self, rid, relName, relPage, relDate):
		self.cur.execute('update awaiting set releasename=?,releasepage=?,releasedate=?,state=1 where id=?', (relName, relPage, relDate, rid))

	def setCompletedState(self, rid, link):
		self.cur.execute('update awaiting set linkdl=?,state=2 where id=?', (link, rid))

	def downloadThread(self, cmd, rname):
		p = sub.Popen(cmd)
		p.wait()
		if p.returncode == 0:
			self.unpackAndDelete('%s/%s.rar' % (self.downDir, rname))

	def unpackAndDelete(self, rarfile):
		rem = re.match(r'(\d{4})-\w+\.\w{3}$', rarfile)
		if rem:
			year = rem[1]
		else:
			year = time.strftime('%Y')
		finalPath = '%s/%s' % (self.destDir, year)
		if not os.path.exists(finalPath):
			os.mkdir(finalPath, 0755)
		cmd = ['unrar', 'x', '-y', '-inul', rarfile, finalPath]
		p = sub.Popen(cmd)
		p.wait()
		os.remove(rarfile)

	def composeAndSendEmail(self):
		html  = u'Привет, друг!<br><br>'
		html += u'Рад сообщить, что совсем недавно вышли некоторые из ожидаемых тобой релизов :-). А именно:<br>'
		i = 1
		for rel in self.released:
			rem = re.match(r'(\d{4})-\w+$', rel['name'])
			if rem:
				year = rem[1]
			else:
				year = time.strftime('%Y')
			webPath = '%s/%s' % (self.downWebPath, year)
			html += u'%d. %s GMT - <b><a href=\'%s/%s/\'>%s</a></b> (по запросу <i>%s</i>)<br>' % (i, rel['time'], webPath, rel['name'], rel['name'], rel['query'])
			i += 1
		html += u'<br>В случае успешного скачивания релизы будут распакованы по месту назначения и станут доступны по указанным выше ссылкам.<br>'
		html += u'До связи! Искренне Ваш, MusicRobot.'

		return req.post(
			"https://api.mailgun.net/v2/%s/messages" % self.domain,
			auth=("api", self.apikey),
			data={
				"from": "Music Scene Releases Robot <mbot@%s>" % self.domain,
				"to": self.email.split(','),
				"subject": u"Выход ожидаемых релизов %s (%d)" % (time.strftime('%d.%m.%Y'), len(self.released)),
				"html": html,
				"text": html,
			}
		)

	def preDbSearch(self, query):
		try:
			res = req.get('http://predb.me/', params={'search': query, 'cats': 'music'}, timeout=15)
		except (req.exceptions.Timeout, req.exceptions.ConnectionError, req.exceptions.HTTPError):
			return False
		if 'Nothing found' in res.text:
			return False
		tree = lxml.html.document_fromstring(res.text)
		names = tree.xpath('//a[@class="p-title"]/text()')
		if names:
			return names[0]
		else:
			return False

	def scenelogSearch(self, query):
		try:
			res = req.get('http://scnlog.eu/', params={'s': query, 'cat': 8}, timeout=15)
		except (req.exceptions.Timeout, req.exceptions.ConnectionError, req.exceptions.HTTPError):
			return False
		if 'Not Found' in res.text:
			return False
		parsed = self.pageParse(res.text)
		if parsed:
			return parsed[0]
		else:
			return False

	def checkReleases(self):
		for row in self.waiting:
			preDbName = self.preDbSearch(row[1])
			if preDbName:
				searchTerm = preDbName
			else:
				searchTerm = row[1]
			rel = self.scenelogSearch(searchTerm)
			if rel:
				try:
					res = req.get(rel['link'], timeout=15)
				except (req.exceptions.Timeout, req.exceptions.ConnectionError, req.exceptions.HTTPError):
					continue
				dllinks = self.getLinks(res.text)
				self.setProcessingState(row[0], rel['name'], rel['link'], rel['time'].strftime('%s'))
				actualLink = self.downloadLink(dllinks, rel['name'])
				if isinstance(actualLink, str):
					self.setCompletedState(row[0], actualLink)
				self.released.append({'name': rel['name'], 'query': row[1], 'time': rel['time'].strftime('%d.%m.%Y %H:%M:%S')})

	def processFailedReleases(self):
		self.getFailedReleases()
		if self.failed:
			for row in self.failed:
				try:
					res = req.get(row[1], timeout=15)
				except (req.exceptions.Timeout, req.exceptions.ConnectionError, req.exceptions.HTTPError):
					continue
				links = self.getLinks(res.text)
				actualLink = self.downloadLink(links, row[2])
				if isinstance(actualLink, str):
					self.setCompletedState(row[0], actualLink)

	def pageParse(self, html):
		tree = lxml.html.document_fromstring(html)
		links = tree.xpath('//a[@rel="bookmark"]')
		times = tree.xpath('//span[@class="localtime"]/@data-lttime')
		if not links or not times:
			return False
		result = []
		i = 0
		for link in links:
			tm = parse(times[i])
			if 'VA' not in link.text:
				result.append({'name': link.text, 'link': link.get('href'), 'time': tm})
			i += 1
		return result

	def getLinks(self, html):
		tree = lxml.html.document_fromstring(html)
		links = tree.xpath('//div[@class="download"]/*/a/@href')
		if not links:
			return False
		return links

	def executeDownload(self, url, relname):
		dlCmd = ['wget', '-T20', '-t5', '-q', '-O%s/%s.rar' % (self.downDir, relname), url]
		t = Thread(target=self.downloadThread, args=(dlCmd, relname))
		t.start()
		return True

	def downloadLink(self, urls, relname):
		for host in self.hostPriority:
			for url in urls:
				if host in url:
					mdl = self.getRightModule(host)
					mod = __import__(mdl)
					dl_cls = getattr(mod, mdl.capitalize())
					link = dl_cls(url).get_link()
					if link:
						self.executeDownload(link, relname)
						return url
		return False

	def workflow(self):
		self.processFailedReleases()
		self.getWaitingReleases()
		if self.waiting:
			self.checkReleases()
			if self.released:
				self.composeAndSendEmail()

if __name__ == '__main__':
	mbot = MusicBot(conf)
	mbot.workflow()
